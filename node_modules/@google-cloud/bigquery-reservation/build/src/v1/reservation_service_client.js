"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservationServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/reservation_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./reservation_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  This API allows users to manage their BigQuery reservations.
 *
 *  A reservation provides computational resource guarantees, in the form of
 *  [slots](https://cloud.google.com/bigquery/docs/slots), to users. A slot is a
 *  unit of computational power in BigQuery, and serves as the basic unit of
 *  parallelism. In a scan of a multi-partitioned table, a single slot operates
 *  on a single partition of the table. A reservation resource exists as a child
 *  resource of the admin project and location, e.g.:
 *    `projects/myproject/locations/US/reservations/reservationName`.
 *
 *  A capacity commitment is a way to purchase compute capacity for BigQuery jobs
 *  (in the form of slots) with some committed period of usage. A capacity
 *  commitment resource exists as a child resource of the admin project and
 *  location, e.g.:
 *    `projects/myproject/locations/US/capacityCommitments/id`.
 * @class
 * @memberof v1
 */
class ReservationServiceClient {
    /**
     * Construct an instance of ReservationServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ReservationServiceClient({fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            assignmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/reservations/{reservation}/assignments/{assignment}'),
            biReservationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/biReservation'),
            capacityCommitmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/capacityCommitments/{capacity_commitment}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            reservationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/reservations/{reservation}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listReservations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'reservations'),
            listCapacityCommitments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'capacityCommitments'),
            listAssignments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'assignments'),
            searchAssignments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'assignments'),
            searchAllAssignments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'assignments'),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.bigquery.reservation.v1.ReservationService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.reservationServiceStub) {
            return this.reservationServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.bigquery.reservation.v1.ReservationService.
        this.reservationServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.bigquery.reservation.v1.ReservationService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.bigquery.reservation.v1
                    .ReservationService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const reservationServiceStubMethods = [
            'createReservation',
            'listReservations',
            'getReservation',
            'deleteReservation',
            'updateReservation',
            'createCapacityCommitment',
            'listCapacityCommitments',
            'getCapacityCommitment',
            'deleteCapacityCommitment',
            'updateCapacityCommitment',
            'splitCapacityCommitment',
            'mergeCapacityCommitments',
            'createAssignment',
            'listAssignments',
            'deleteAssignment',
            'searchAssignments',
            'searchAllAssignments',
            'moveAssignment',
            'updateAssignment',
            'getBiReservation',
            'updateBiReservation',
        ];
        for (const methodName of reservationServiceStubMethods) {
            const callPromise = this.reservationServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.reservationServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'bigqueryreservation.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'bigqueryreservation.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/bigquery',
            'https://www.googleapis.com/auth/cloud-platform',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createReservation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createReservation(request, options, callback);
    }
    getReservation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getReservation(request, options, callback);
    }
    deleteReservation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteReservation(request, options, callback);
    }
    updateReservation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'reservation.name': (_a = request.reservation.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateReservation(request, options, callback);
    }
    createCapacityCommitment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCapacityCommitment(request, options, callback);
    }
    getCapacityCommitment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCapacityCommitment(request, options, callback);
    }
    deleteCapacityCommitment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteCapacityCommitment(request, options, callback);
    }
    updateCapacityCommitment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'capacity_commitment.name': (_a = request.capacityCommitment.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCapacityCommitment(request, options, callback);
    }
    splitCapacityCommitment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.splitCapacityCommitment(request, options, callback);
    }
    mergeCapacityCommitments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.mergeCapacityCommitments(request, options, callback);
    }
    createAssignment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createAssignment(request, options, callback);
    }
    deleteAssignment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteAssignment(request, options, callback);
    }
    moveAssignment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.moveAssignment(request, options, callback);
    }
    updateAssignment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'assignment.name': (_a = request.assignment.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateAssignment(request, options, callback);
    }
    getBiReservation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getBiReservation(request, options, callback);
    }
    updateBiReservation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'bi_reservation.name': (_a = request.biReservation.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateBiReservation(request, options, callback);
    }
    listReservations(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listReservations(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name containing project and location, e.g.:
     *     `projects/myproject/locations/US`
     * @param {number} request.pageSize
     *   The maximum number of items to return per page.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.bigquery.reservation.v1.Reservation | Reservation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listReservationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listReservationsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listReservations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listReservations.createStream(this.innerApiCalls.listReservations, request, callSettings);
    }
    /**
     * Equivalent to `listReservations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name containing project and location, e.g.:
     *     `projects/myproject/locations/US`
     * @param {number} request.pageSize
     *   The maximum number of items to return per page.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.bigquery.reservation.v1.Reservation | Reservation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/reservation_service.list_reservations.js</caption>
     * region_tag:bigqueryreservation_v1_generated_ReservationService_ListReservations_async
     */
    listReservationsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listReservations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listReservations.asyncIterate(this.innerApiCalls['listReservations'], request, callSettings);
    }
    listCapacityCommitments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCapacityCommitments(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the parent reservation. E.g.,
     *      `projects/myproject/locations/US`
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.bigquery.reservation.v1.CapacityCommitment | CapacityCommitment} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCapacityCommitmentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listCapacityCommitmentsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCapacityCommitments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCapacityCommitments.createStream(this.innerApiCalls.listCapacityCommitments, request, callSettings);
    }
    /**
     * Equivalent to `listCapacityCommitments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Resource name of the parent reservation. E.g.,
     *      `projects/myproject/locations/US`
     * @param {number} request.pageSize
     *   The maximum number of items to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.bigquery.reservation.v1.CapacityCommitment | CapacityCommitment}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/reservation_service.list_capacity_commitments.js</caption>
     * region_tag:bigqueryreservation_v1_generated_ReservationService_ListCapacityCommitments_async
     */
    listCapacityCommitmentsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCapacityCommitments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCapacityCommitments.asyncIterate(this.innerApiCalls['listCapacityCommitments'], request, callSettings);
    }
    listAssignments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listAssignments(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name e.g.:
     *
     *   `projects/myproject/locations/US/reservations/team1-prod`
     *
     *   Or:
     *
     *   `projects/myproject/locations/US/reservations/-`
     * @param {number} request.pageSize
     *   The maximum number of items to return per page.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.bigquery.reservation.v1.Assignment | Assignment} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAssignmentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listAssignmentsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAssignments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAssignments.createStream(this.innerApiCalls.listAssignments, request, callSettings);
    }
    /**
     * Equivalent to `listAssignments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource name e.g.:
     *
     *   `projects/myproject/locations/US/reservations/team1-prod`
     *
     *   Or:
     *
     *   `projects/myproject/locations/US/reservations/-`
     * @param {number} request.pageSize
     *   The maximum number of items to return per page.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.bigquery.reservation.v1.Assignment | Assignment}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/reservation_service.list_assignments.js</caption>
     * region_tag:bigqueryreservation_v1_generated_ReservationService_ListAssignments_async
     */
    listAssignmentsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAssignments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAssignments.asyncIterate(this.innerApiCalls['listAssignments'], request, callSettings);
    }
    searchAssignments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        this.warn('DEP$ReservationService-$SearchAssignments', 'SearchAssignments is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.innerApiCalls.searchAssignments(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the admin project(containing project and
     *   location), e.g.:
     *     `projects/myproject/locations/US`.
     * @param {string} request.query
     *   Please specify resource name as assignee in the query.
     *
     *   Examples:
     *
     *   * `assignee=projects/myproject`
     *   * `assignee=folders/123`
     *   * `assignee=organizations/456`
     * @param {number} request.pageSize
     *   The maximum number of items to return per page.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.bigquery.reservation.v1.Assignment | Assignment} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `searchAssignmentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @deprecated SearchAssignments is deprecated and may be removed in a future version.
     */
    searchAssignmentsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['searchAssignments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        this.warn('DEP$ReservationService-$SearchAssignments', 'SearchAssignments is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.descriptors.page.searchAssignments.createStream(this.innerApiCalls.searchAssignments, request, callSettings);
    }
    /**
     * Equivalent to `searchAssignments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the admin project(containing project and
     *   location), e.g.:
     *     `projects/myproject/locations/US`.
     * @param {string} request.query
     *   Please specify resource name as assignee in the query.
     *
     *   Examples:
     *
     *   * `assignee=projects/myproject`
     *   * `assignee=folders/123`
     *   * `assignee=organizations/456`
     * @param {number} request.pageSize
     *   The maximum number of items to return per page.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.bigquery.reservation.v1.Assignment | Assignment}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/reservation_service.search_assignments.js</caption>
     * region_tag:bigqueryreservation_v1_generated_ReservationService_SearchAssignments_async
     * @deprecated SearchAssignments is deprecated and may be removed in a future version.
     */
    searchAssignmentsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['searchAssignments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        this.warn('DEP$ReservationService-$SearchAssignments', 'SearchAssignments is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.descriptors.page.searchAssignments.asyncIterate(this.innerApiCalls['searchAssignments'], request, callSettings);
    }
    searchAllAssignments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.searchAllAssignments(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name with location (project name could be the
     *   wildcard '-'), e.g.:
     *     `projects/-/locations/US`.
     * @param {string} request.query
     *   Please specify resource name as assignee in the query.
     *
     *   Examples:
     *
     *   * `assignee=projects/myproject`
     *   * `assignee=folders/123`
     *   * `assignee=organizations/456`
     * @param {number} request.pageSize
     *   The maximum number of items to return per page.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link google.cloud.bigquery.reservation.v1.Assignment | Assignment} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `searchAllAssignmentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    searchAllAssignmentsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['searchAllAssignments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.searchAllAssignments.createStream(this.innerApiCalls.searchAllAssignments, request, callSettings);
    }
    /**
     * Equivalent to `searchAllAssignments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name with location (project name could be the
     *   wildcard '-'), e.g.:
     *     `projects/-/locations/US`.
     * @param {string} request.query
     *   Please specify resource name as assignee in the query.
     *
     *   Examples:
     *
     *   * `assignee=projects/myproject`
     *   * `assignee=folders/123`
     *   * `assignee=organizations/456`
     * @param {number} request.pageSize
     *   The maximum number of items to return per page.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous List request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.bigquery.reservation.v1.Assignment | Assignment}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/reservation_service.search_all_assignments.js</caption>
     * region_tag:bigqueryreservation_v1_generated_ReservationService_SearchAllAssignments_async
     */
    searchAllAssignmentsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['searchAllAssignments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.searchAllAssignments.asyncIterate(this.innerApiCalls['searchAllAssignments'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified assignment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} reservation
     * @param {string} assignment
     * @returns {string} Resource name string.
     */
    assignmentPath(project, location, reservation, assignment) {
        return this.pathTemplates.assignmentPathTemplate.render({
            project: project,
            location: location,
            reservation: reservation,
            assignment: assignment,
        });
    }
    /**
     * Parse the project from Assignment resource.
     *
     * @param {string} assignmentName
     *   A fully-qualified path representing Assignment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAssignmentName(assignmentName) {
        return this.pathTemplates.assignmentPathTemplate.match(assignmentName)
            .project;
    }
    /**
     * Parse the location from Assignment resource.
     *
     * @param {string} assignmentName
     *   A fully-qualified path representing Assignment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAssignmentName(assignmentName) {
        return this.pathTemplates.assignmentPathTemplate.match(assignmentName)
            .location;
    }
    /**
     * Parse the reservation from Assignment resource.
     *
     * @param {string} assignmentName
     *   A fully-qualified path representing Assignment resource.
     * @returns {string} A string representing the reservation.
     */
    matchReservationFromAssignmentName(assignmentName) {
        return this.pathTemplates.assignmentPathTemplate.match(assignmentName)
            .reservation;
    }
    /**
     * Parse the assignment from Assignment resource.
     *
     * @param {string} assignmentName
     *   A fully-qualified path representing Assignment resource.
     * @returns {string} A string representing the assignment.
     */
    matchAssignmentFromAssignmentName(assignmentName) {
        return this.pathTemplates.assignmentPathTemplate.match(assignmentName)
            .assignment;
    }
    /**
     * Return a fully-qualified biReservation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    biReservationPath(project, location) {
        return this.pathTemplates.biReservationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from BiReservation resource.
     *
     * @param {string} biReservationName
     *   A fully-qualified path representing BiReservation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBiReservationName(biReservationName) {
        return this.pathTemplates.biReservationPathTemplate.match(biReservationName)
            .project;
    }
    /**
     * Parse the location from BiReservation resource.
     *
     * @param {string} biReservationName
     *   A fully-qualified path representing BiReservation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBiReservationName(biReservationName) {
        return this.pathTemplates.biReservationPathTemplate.match(biReservationName)
            .location;
    }
    /**
     * Return a fully-qualified capacityCommitment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} capacity_commitment
     * @returns {string} Resource name string.
     */
    capacityCommitmentPath(project, location, capacityCommitment) {
        return this.pathTemplates.capacityCommitmentPathTemplate.render({
            project: project,
            location: location,
            capacity_commitment: capacityCommitment,
        });
    }
    /**
     * Parse the project from CapacityCommitment resource.
     *
     * @param {string} capacityCommitmentName
     *   A fully-qualified path representing CapacityCommitment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCapacityCommitmentName(capacityCommitmentName) {
        return this.pathTemplates.capacityCommitmentPathTemplate.match(capacityCommitmentName).project;
    }
    /**
     * Parse the location from CapacityCommitment resource.
     *
     * @param {string} capacityCommitmentName
     *   A fully-qualified path representing CapacityCommitment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCapacityCommitmentName(capacityCommitmentName) {
        return this.pathTemplates.capacityCommitmentPathTemplate.match(capacityCommitmentName).location;
    }
    /**
     * Parse the capacity_commitment from CapacityCommitment resource.
     *
     * @param {string} capacityCommitmentName
     *   A fully-qualified path representing CapacityCommitment resource.
     * @returns {string} A string representing the capacity_commitment.
     */
    matchCapacityCommitmentFromCapacityCommitmentName(capacityCommitmentName) {
        return this.pathTemplates.capacityCommitmentPathTemplate.match(capacityCommitmentName).capacity_commitment;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified reservation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} reservation
     * @returns {string} Resource name string.
     */
    reservationPath(project, location, reservation) {
        return this.pathTemplates.reservationPathTemplate.render({
            project: project,
            location: location,
            reservation: reservation,
        });
    }
    /**
     * Parse the project from Reservation resource.
     *
     * @param {string} reservationName
     *   A fully-qualified path representing Reservation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReservationName(reservationName) {
        return this.pathTemplates.reservationPathTemplate.match(reservationName)
            .project;
    }
    /**
     * Parse the location from Reservation resource.
     *
     * @param {string} reservationName
     *   A fully-qualified path representing Reservation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReservationName(reservationName) {
        return this.pathTemplates.reservationPathTemplate.match(reservationName)
            .location;
    }
    /**
     * Parse the reservation from Reservation resource.
     *
     * @param {string} reservationName
     *   A fully-qualified path representing Reservation resource.
     * @returns {string} A string representing the reservation.
     */
    matchReservationFromReservationName(reservationName) {
        return this.pathTemplates.reservationPathTemplate.match(reservationName)
            .reservation;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.reservationServiceStub && !this._terminated) {
            return this.reservationServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.ReservationServiceClient = ReservationServiceClient;
//# sourceMappingURL=reservation_service_client.js.map